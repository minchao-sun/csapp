# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

# Sample linked list
    .align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

main:
    irmovq src,%rdi
    irmovq dest,%rsi
    irmovq $3,%rdx
    call copy_block
    ret

copy_block:
    irmovq $8,%r8           # Constant 8
    irmovq $1,%r9           # Constant 1
    xorq %rax,%rax          # long result = 0
    jmp test
loop:
    mrmovq (%rdi),%r10      # val = *src
    rmmovq %r10,(%rsi)      # *dest = val
    addq %r8,%rdi           # src++
    addq %r8,%rsi           # dest++
    xorq %r10,%rax          # result ^= val
    subq %r9,%rdx           # len--
test:
    andq %rdx,%rdx          # Set CC
    jne loop                # Stop when 0
    ret

# Sets up stack
    .pos 0x200
stack:
