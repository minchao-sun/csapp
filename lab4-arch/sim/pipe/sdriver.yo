                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# len -= 2
0x03e: 755000000000000000   | 	jge Loop			# if len >= 0, goto Loop
0x047: 70c900000000000000   | 	jmp Rest
0x050:                      | Loop:						# use Loop Unrolling
0x050: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val1 from src...
0x05a: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val2 from src+8...
0x064: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# store val1 to dst
0x06e: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# store val2 to dst+8
0x078: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x07a: 718d00000000000000   | 	jle Test2			# if so, goto Test2:
0x083: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x08d:                      | Test2:
0x08d: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x08f: 71a200000000000000   | 	jle Npos			# if so, goto Npos:
0x098: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a2:                      | Npos:
0x0a2: c0f71000000000000000 | 	iaddq $16, %rdi		# src += 2
0x0ac: c0f61000000000000000 | 	iaddq $16, %rsi		# dst += 2
0x0b6: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# len -= 2
0x0c0: 755000000000000000   | 	jge Loop			# if len >= 0, goto Loop:
0x0c9:                      | Rest:
0x0c9: c0f20200000000000000 | 	iaddq $2, %rdx		# len += 2
0x0d3: 710501000000000000   | 	jle Done			# if len <= 0, goto Done:
0x0dc: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0e6: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0f0: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0f2: 710501000000000000   | 	jle Done			# if so, goto Done:
0x0fb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x105:                      | Done:
0x105: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x106:                      | End:
                            | #/* $end ncopy-ys */
0x106:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x108:                      | 	.align 8
0x108:                      | src:
0x108: ffffffffffffffff     | 	.quad -1
0x110: 0200000000000000     | 	.quad 2
0x118: 0300000000000000     | 	.quad 3
0x120: fcffffffffffffff     | 	.quad -4
0x128: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x130:                      | 	.align 16
0x130:                      | Predest:
0x130: fadebc0000000000     | 	.quad 0xbcdefa
0x138:                      | dest:
0x138: abefcd0000000000     | 	.quad 0xcdefab
0x140: abefcd0000000000     | 	.quad 0xcdefab
0x148: abefcd0000000000     | 	.quad 0xcdefab
0x150: abefcd0000000000     | 	.quad 0xcdefab
0x158:                      | Postdest:
0x158: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x160:                      | .align 8
                            | # Run time stack
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
                            | 
0x1e0:                      | Stack:
