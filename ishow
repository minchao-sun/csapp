#!/usr/bin/env python3
import sys

def ishow(number):
    if number < 0 or number > 0xFFFFFFFF:
        print("Error: Input must be a 32-bit unsigned integer (0 <= number <= 4294967295).")
        return

    # Binary and hexadecimal representation
    bin_rep = bin(number)[2:].zfill(32)         # Stripping '0b' and padding to 32 bits
    bin_rep = ' '.join([bin_rep[i:i+4] for i in range(0, len(bin_rep), 4)])
    hex_rep = '0x' + hex(number)[2:].zfill(8)
    # Calculate the signed int representation
    if number <= 0x7FFFFFFF:
        signed_int = number  # Positive number, same as unsigned
    else:
        signed_int = number - 0x100000000  # Convert to negative signed 32-bit integer

    print(f"Bin: {bin_rep}")
    print(f"Hex: {hex_rep}")
    print(f'signed: {signed_int}, unsigned: {number}')


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: ./ishow <number>")
        sys.exit(1)

    try:
        number = eval(sys.argv[1])
        ishow(number)
    except ValueError:
        print("Error: Please enter a valid 32-bit unsigned integer.")
        sys.exit(1)