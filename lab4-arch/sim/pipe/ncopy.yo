                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6300                 | 	xorq %rax,%rax		# count = 0;
0x002: c0f2fdffffffffffffff | 	iaddq $-3, %rdx		# len -= 3
0x00c: 751e00000000000000   | 	jge Loop			# if len >= 0, goto Loop
0x015: 70c000000000000000   | 	jmp Rest
0x01e:                      | Loop:						# use Loop Unrolling
0x01e: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val1 from src...
0x028: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val2 from src+8...
0x032: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val3 from src+16...
0x03c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# store val1 to dst
0x046: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# store val2 to dst+8
0x050: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# store val3 to dst+16
0x05a: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x05c: 716f00000000000000   | 	jle Test2			# if so, goto Test2:
0x065: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x06f:                      | Test2:
0x06f: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x071: 718400000000000000   | 	jle Test3			# if so, goto Test3:
0x07a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x084:                      | Test3:
0x084: 62cc                 | 	andq %r12, %r12		# val3 <= 0?
0x086: 719900000000000000   | 	jle Npos			# if so, goto Npos:
0x08f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x099:                      | Npos:
0x099: c0f71800000000000000 | 	iaddq $24, %rdi		# src += 3
0x0a3: c0f61800000000000000 | 	iaddq $24, %rsi		# dst += 3
0x0ad: c0f2fdffffffffffffff | 	iaddq $-3, %rdx		# len -= 3
0x0b7: 751e00000000000000   | 	jge Loop			# if len >= 0, goto Loop:
0x0c0:                      | Rest:
0x0c0: c0f20200000000000000 | 	iaddq $2, %rdx		# len += 2 (could be: -1, 0, 1)
0x0ca: 712601000000000000   | 	jle Rest1			# if len <= 0, goto Rest1:
0x0d3: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val1 from src...
0x0dd: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val2 from src+8...
0x0e7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# store val1 to dst
0x0f1: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# store val2 to dst+8
0x0fb: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x0fd: 711001000000000000   | 	jle Test4			# if so, goto Test4:
0x106: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x110:                      | Test4:
0x110: 62bb                 | 	andq %r11, %r11		# val2 <= 0?
0x112: 715801000000000000   | 	jle Done			# if so, goto Done:
0x11b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x125: 90                   | 	ret
0x126:                      | Rest1:
0x126: 725801000000000000   | 	jl Done
0x12f: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x139: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x143: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x145: 715801000000000000   | 	jle Done
0x14e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x158:                      | Done:
0x158: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x159:                      | End:
                            | #/* $end ncopy-ys */
