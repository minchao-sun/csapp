                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp      # Set up stack pointer
0x00a: 804800000000000000   |     call main               # Execute main program
0x013: 00                   |     halt                    # Terminate program
                            | 
                            | # Sample linked list
0x018:                      |     .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq ele1,%rdi
0x052: 805c00000000000000   |     call rsum_list
0x05b: 90                   |     ret
                            | 
0x05c:                      | rsum_list:
0x05c: a09f                 |     pushq %r9
0x05e: 6300                 |     xorq %rax,%rax          # long val = 0
0x060: 6277                 |     andq %rdi,%rdi          # Set CC
0x062: 738a00000000000000   |     je return               # Goto return
0x06b: 50970000000000000000 |     mrmovq (%rdi),%r9       # Get ls->val
0x075: 50770800000000000000 |     mrmovq 8(%rdi),%rdi     # ls = ls->next
0x07f: 805c00000000000000   |     call rsum_list          # rest = rsum_list(ls->next)
0x088: 6090                 |     addq %r9,%rax           # val + rest
0x08a:                      | return:
0x08a: b09f                 |     popq %r9
0x08c: 90                   |     ret
                            | 
                            | # Sets up stack
0x200:                      |     .pos 0x200
0x200:                      | stack:
